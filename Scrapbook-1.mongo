//Quantidade de filmes na biblioteca
db.movies.count()

//Saber quais os generos de filme exisem na biblioteca
db.movies.aggregate([
    {$match: {}},
    { $group : { _id : "$genres" }},
    {$sort: {_id: 1}}
]).pretty()

//Informar qual o genero do filme a procurar
db.movies.aggregate([
    {$match: {genres: "Animation"}},
    {$project: {
        genero: '$genres',
        title: "$title",
        _id: 0,
    }}
]).pretty()

//Informar que tipo de genenero aravés do nomeo do filme
db.getCollection('movies').aggregate([
    { $match: { title: "Toy Story (1995)" } },
    {$project: {
        _id: 0,
        userId: 0
    }},
    {
        $lookup: {
        from: 'tags',
        localField: 'title',
        foreignField: 'movieId',
        as: 'movie_',
        },
    },
    {$project: {
        'movie_': 0,
    }}
]).pretty()

//Informar como o filme está etiquetado
db.tags.aggregate([
    { $limit : 10 },
    {$project: {
        _id: 0,
        userId: 0
    }},
    {
        $lookup: {
        from: 'movies',
        localField: 'tag',
        foreignField: 'movieId',
        as: 'tag_',
        }
    },
    /*{
      $unwind: "$tag"
   }*/
]).pretty()

db.tags.aggregate([
    { $limit : 10 },
     {$project: {
        _id: 0,
        userId: 0
    }},
   {
      $unwind: "$tag"
   },
   {
    $lookup:
        {
            from: "movies",
            localField: "tags",
            foreignField : "_id",
            as: "tag_ordem"
        }
    }
]).pretty()

//Saber Nome do filme e seu genero
db.movies.aggregate([
    { $limit : 10 },
    {$project: {
        _id: 0,
        userId: 0
    }},
    {
        $lookup: {
        from: 'tags',
        localField: 'title',
        foreignField: 'movieId',
        as: 'movie_data',
        }
    },
    {$project: {
        'movie_data': 0,
    }}
]).pretty()

//Gerar o rating dos filmes
db.ratings.aggregate([
    { $limit : 10 },// Limitar
   {
       $project: {
        _id: 0,
        userId: 0
    }
    },
    {
        $lookup: {
        from: 'tags',
        localField: 'movieId',
        foreignField: 'movieId',
        as: 'tag',
        }
    },
    { $out : "rating_movies" }, 
]).pretty()

//Saber o rating dos filmes
db.rating_movies.aggregate([
    { $limit : 100 },
    {$project: {
        _id: 0,
        userId: 0,
        timestamp: 0,
        "tag._id": 0,
       /* "tag.movieId": 0,
        "tag.timestamp": 0,*/
    }},
    {
        $lookup: {
        from: 'movies',
        localField: 'rating',
        foreignField: 'title',
        as: 'title',
        }
    }
]).pretty()


//Saber qual a classificação do filme de acordo com o utilizador
db.ratings.aggregate([
    //{$match: {userId: 1}},
    /*{$project: {
        _id: 0,
        userId: 0,
        movieId: 0,
        timestamp: 0
    }},*/
    {
        $lookup: {
        from: 'cinema.movies',
        localField: 'rating',
        foreignField: 'title',
        as: 'title',
        }
    },
    {$project: {
        'title': 0,
    }}
]).pretty()

db.rating_movies.aggregate([
    //{$match: {movieId: 3893}},
    ///{$group: {_id: "$movieId", total: {$avg: "$rating"}}},
    {$project: {
        //_id: 0,
        "tag._id": 0,
        "tag.movieId": 0,
        "tag.timestamp": 0,
        timestamp: 0
    }},
    {
        $lookup: {
        from: 'rating',
        localField: 'tag.userId',
        foreignField: 'movieId',
        as: 'rating_movies',
        }
    }
]).pretty()

//Mostrar dados dos filmes no IMDB
db.links.aggregate([
    //{ $limit : 10 },
    /*{$project: {
        _id: 0,
    }},*/
    {
        $lookup: {
        from: 'cinema.movies',
        localField: 'movieId',
        foreignField: 'movieId',
        as: 'movie_data',
        }
    }
    /*,
    {$project: {
        'movie_data._id': 0,
        'movie_data.movieId': 0,
    }}*/
]).pretty()


//Verifica máximo, mínimo e média da classificação
db.ratings.aggregate([
    { $limit : 1000 },
    //{$match: {movieId: 1}},
    {
        $group: {
            _id: 0,
            minimo:{$min:"$rating"},
            maximo:{$max:"$rating"},
            media:{$avg:"$rating"},
           // dpadrao:{$stdDevSamp:"$rating"}
        }
    },
    { $out : "rating_AVG" },

]).pretty()


/*var mapFunction1 = function() {
                       emit(this.movieId, this.rating);
                   };


var reduceFunction1 = function(keyCustId, valuesPrices) {
                          return Array.sum(valuesPrices);
                      };

                    db.ratings.mapReduce(
                     mapFunction1,
                     reduceFunction1,
                     { out: "map_reduce_example" }
                   )
*/
//Teste Reduce
db.ratings.mapReduce(
   function() { emit(this.movieId, this.rating );},  //map function
   function(key,values){ return Array.avg( values ) }, 
   {   //reduce function
      out: "classificacao_avg",
      //query: {movieId: 2},
      /*sort: document,
      limit: number*/
   }
)

db.ratings.mapReduce(
   function() { emit(this.rating, 1 );},  //map function
   function(key,values){ return Array.sum( values ) }, 
   {   //reduce function
      out: "classificacao",
      query: {rating: 0.5},
   }
)

db.movies.mapReduce( function() {emit(this._ide,1); }, function(key,
value) {return Array.count(values)}, { query:{od:126}, out:
"post_total" } )







function map() {emit (this.movieId, this.rating)}

function reduce(key, values) {return Array.avg(values)}

db.ratings.mapReduce(map, reduce, { 
    out: "rating", 
    query: {movieId: 2},
    })


/*
db.ratings.mapReduce(
function map() {emit (this.movieId, this.rating)},
function reduce(key, values) {return Array.avg(values)},
map, reduce, 
{ out: "collection", 
 query: movieId: 29}
)

*/


/**
sh.enableSharding("movies")
db.movies.createIndex( { _id: 1 } )
db.movies.createIndex( { movie: 1 }, {unique: false} )
sh.shardCollection("movies.1", {movie:1}, false)
 */